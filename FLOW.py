import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import ta
import tensorflow as tf
import time
import os
from pymongo import MongoClient
from pymongo.server_api import ServerApi
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
password = os.getenv('MONGO_PASSWORD')

# K·∫øt n·ªëi MongoDB Atlas
uri = f"mongodb+srv://trainguyenchi30:{password}@cryptodata.t2i1je2.mongodb.net/?retryWrites=true&w=majority&appName=CryptoData"
client = MongoClient(uri, server_api=ServerApi('1'))

# Truy c·∫≠p DB v√† Collection
db = client['my_database']
collection = db['my_collection']

# K·∫øt n·ªëi v·ªõi Binance
binance = ccxt.binance({
    'apiKey': '',
    'secret': '',
})

def fetch_data():
    try:
        ohlcv = binance.fetch_ohlcv('BTC/USDT', timeframe='1h', limit=130)
        df = pd.DataFrame(ohlcv, columns=['Date', 'Open', 'High', 'Low', 'Close', 'Volume'])
        df['Date'] = pd.to_datetime(df['Date'], unit='ms')
        # print(f"‚úÖ Fetched {len(df)} recent sessions")
        return df
    except Exception as e:
        print(f"‚ùå Error fetching data: {e}")
        return pd.DataFrame()

# H√†m ƒë·ªÉ th√™m ch·ªâ b√°o k·ªπ thu·∫≠t v√†o d·ªØ li·ªáu
def add_technical_indicators(df):
    df['close/open'] = df['Close'] / df['Open'] - 1
    df['high-low'] = (df['High'] - df['Low']) / df['Close']
    df['ema12'] = ta.trend.ema_indicator(close=df['Close'], window=12) / df['Close'] - 1
    df['ema26'] = ta.trend.ema_indicator(close=df['Close'], window=26) / df['Close'] - 1
    df['macd'] = (df['ema12'] - df['ema26']) / df['Close']
    df['rsi14'] = ta.momentum.RSIIndicator(close=df['Close'], window=14).rsi() / 50 - 1
    df['stoch_rsi'] = ta.momentum.StochRSIIndicator(close=df['Close'], window=14).stochrsi() * 2 - 1
    bb = ta.volatility.BollingerBands(close=df['Close'], window=14)
    df['bb_width'] = (bb.bollinger_hband() - bb.bollinger_lband()) / bb.bollinger_mavg()
    return df

# Load m√¥ h√¨nh AI (ch·∫°y 1 l·∫ßn duy nh·∫•t)
model = tf.keras.models.load_model('transformer_model_balanced.keras')

# H√†m d·ª± ƒëo√°n v·ªõi m√¥ h√¨nh Transformer
def predict_with_model(df):
    features = ['close/open', 'high-low', 'ema12', 'ema26', 'macd', 'rsi14', 'stoch_rsi', 'bb_width']
    X_raw = df[features].values

    def create_input_sequences(X, timesteps=100):
        Xs = []
        for i in range(len(X) - timesteps):
            Xs.append(X[i:i+timesteps])
        return np.array(Xs)

    timesteps = 100
    X_seq = create_input_sequences(X_raw, timesteps)

    pred_probs = model.predict(X_seq, verbose=0)
    confidence = pred_probs[:, 1]
    pred_labels = (confidence > 0.5).astype(int)

    padding = [np.nan] * timesteps
    df['predict'] = padding + pred_labels.tolist()
    df['confidence'] = padding + confidence.tolist()

    return df.dropna()

# H√†m c·∫≠p nh·∫≠t MongoDB
def update_mongo(df):
    data_dict = df.to_dict(orient='records')
    updated, inserted = 0, 0
    for doc in data_dict:
        existing_doc = collection.find_one({'Date': doc['Date']})
        if existing_doc is None:
            collection.insert_one(doc)
            inserted += 1
        else:
            different = any(existing_doc.get(k) != doc.get(k) for k in doc.keys() if k != '_id')
            if different:
                collection.update_one({'Date': doc['Date']}, {'$set': doc})
                updated += 1
    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {updated} d√≤ng, ch√®n m·ªõi {inserted} d√≤ng v√†o MongoDB.")

# H√†m ch√≠nh ƒë·ªÉ ch·∫°y li√™n t·ª•c v√† ƒëo th·ªùi gian m·ªói v√≤ng l·∫∑p
def main():
    while True:
        start_time = time.time()  # L·∫•y th·ªùi gian b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p

        # Crawl d·ªØ li·ªáu t·ª´ Binance
        df = fetch_data()

        # Th√™m ch·ªâ b√°o k·ªπ thu·∫≠t
        df = add_technical_indicators(df)
        
        # D·ª± ƒëo√°n v·ªõi m√¥ h√¨nh Transformer
        df = predict_with_model(df)
        
        # print(df['confidence'])

        final_row_count = len(df)
        print(f"üîç S·ªë d√≤ng sau khi dropna: {final_row_count}")    
        
        # C·∫≠p nh·∫≠t MongoDB
        update_mongo(df)

        end_time = time.time()  # L·∫•y th·ªùi gian k·∫øt th√∫c v√≤ng l·∫∑p

        loop_duration = end_time - start_time  # T√≠nh th·ªùi gian v√≤ng l·∫∑p
        print(f"‚úÖ V√≤ng l·∫∑p ho√†n th√†nh trong {loop_duration:.2f} gi√¢y.")

if __name__ == "__main__":
    main()
